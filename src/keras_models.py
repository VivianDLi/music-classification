from keras import Model, Sequential
from keras.layers import (
    Conv2D,
    DepthwiseConv2D,
    Dense,
    MaxPooling2D,
    GlobalMaxPooling2D,
    BatchNormalization,
)


def get_full_model(n_classes):
    full_model = Sequential(
        [
            Conv2D(
                32,
                (12, 3),
                (1, 1),
                input_shape=(84, None, 1),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_1",
            ),
            BatchNormalization(),
            Conv2D(
                64,
                (13, 3),
                (1, 2),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_2",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            Conv2D(
                64,
                (13, 3),
                (1, 1),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_3",
            ),
            BatchNormalization(),
            Conv2D(
                64,
                (3, 3),
                (1, 2),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_4",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            Conv2D(
                128,
                (3, 3),
                (1, 1),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_5",
            ),
            BatchNormalization(),
            Conv2D(
                256,
                (3, 3),
                (1, 2),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_6",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            Conv2D(
                256,
                (3, 3),
                (1, 1),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_7",
            ),
            BatchNormalization(),
            Conv2D(
                256,
                (3, 3),
                (1, 2),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_8",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            Conv2D(
                512,
                (3, 3),
                (1, 1),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_9",
            ),
            BatchNormalization(),
            Conv2D(
                512,
                (3, 3),
                (1, 2),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_10",
            ),
            BatchNormalization(),
            GlobalMaxPooling2D(data_format="channels_last", keepdims=True),
            Dense(300, name="representation_layer"),
            Dense(
                n_classes, activation="softmax", name="classification_layer"
            ),
        ]
    )
    return full_model


def get_small_model(n_classes):
    full_model = Sequential(
        [
            DepthwiseConv2D(
                (12, 3),
                (1, 1),
                depth_multiplier=32,
                input_shape=(84, None, 1),
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_1",
            ),
            BatchNormalization(),
            DepthwiseConv2D(
                (13, 3),
                (1, 2),
                depth_multiplier=64,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_2",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            DepthwiseConv2D(
                (13, 3),
                (1, 1),
                depth_multiplier=64,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_3",
            ),
            BatchNormalization(),
            DepthwiseConv2D(
                (3, 3),
                (1, 2),
                depth_multiplier=64,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_4",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            DepthwiseConv2D(
                (3, 3),
                (1, 1),
                depth_multiplier=128,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_5",
            ),
            BatchNormalization(),
            DepthwiseConv2D(
                (3, 3),
                (1, 2),
                depth_multiplier=256,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_6",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            DepthwiseConv2D(
                (3, 3),
                (1, 1),
                depth_multiplier=256,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_7",
            ),
            BatchNormalization(),
            DepthwiseConv2D(
                (3, 3),
                (1, 2),
                depth_multiplier=256,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_8",
            ),
            BatchNormalization(),
            MaxPooling2D((1, 2), (1, 2), data_format="channels_last"),
            DepthwiseConv2D(
                (3, 3),
                (1, 1),
                depth_multiplier=512,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_9",
            ),
            BatchNormalization(),
            DepthwiseConv2D(
                (3, 3),
                (1, 2),
                depth_multiplier=512,
                padding="same",
                data_format="channels_last",
                activation="relu",
                name="conv_10",
            ),
            BatchNormalization(),
            GlobalMaxPooling2D(data_format="channels_last", keepdims=True),
            Dense(300, name="representation_layer"),
            Dense(
                n_classes, activation="softmax", name="classification_layer"
            ),
        ]
    )
    return full_model


def get_representation_model(full_model):
    return Model(
        inputs=full_model.inputs,
        outputs=full_model.get_layer(name="representation_layer").output,
    )
